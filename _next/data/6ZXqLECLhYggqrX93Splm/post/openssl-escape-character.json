{"pageProps":{"frontmatter":{"title":"Openssl escape character","date":"January 8, 2022","description":"Be careful about the escape character as Linux input"},"post":{"content":" \nFirst of all, I pick [HTTP signature](https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12) as my authorization method.\n\nI use [Vegeta](https://github.com/tsenart/vegeta) to load test my API service.\n\nWhen writing a script for target generation, I need to make a signature for each request.\n\nSo I used `openssl` to generate it.\n```\necho -n \"${message}\" | openssl dgst -sha256 -hmac \"${secret}\" -binary | base64\n```\nBut I did not pass my authenticator.\n\nAfter some trying(use other language to reproduce what happened), I found that message used for generation was weird.(check the byte)\n\nGo:\n```go\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\tb64 \"encoding/base64\"\n)\n// https://go.dev/play/p/JaDyZh_wNqn\nfunc hmacSha256(data string, secret string) string {\n\th := hmac.New(sha256.New, []byte(secret))\n\th.Write([]byte(data))\n\treturn b64.URLEncoding.EncodeToString(h.Sum(nil))\n}\n```\n\nNode:\n```javascript\nvar crypto = require('crypto');\nfunction hmacSha256(message, secret) {\n    hmac = crypto.createHmac('sha256', secret);\n    hmac.update(message);\n    return hmac.digest('base64')\n}\n```\n\nWhen make `a\\nmessage` as argument in Linux, it would be the same as `a\\\\nmessage`.\n\nUse \n```\necho -e -n \"${message}\" | openssl dgst -sha256 -hmac \"${secret}\" -binary | base64\n``` \ninstead.\n\nThis was why my target generation script didn't pass the authenticator.\n\nI had definitely known how the escape character works, but I didn't check it in the first place.\n\nWhen using escape character as Linux input, you should be careful about it.\n\nOpenssl might be a misplace but never mind. I found the problem from it.\n\nJust write a note to remember the time wasted on it.","excerpt":""},"previousPost":{"slug":"cache-policy","frontmatter":{"title":"An introduction to Window TinyLFU","date":"April 27, 2021","description":"TinyLFU is a frequency-based cache admission policy"},"excerpt":"","content":" \n## Foreword\nI will just easily go through techniques used by Window TinyLFU.\n\n## Why Cache?\nBecause we want to access data fast. The buffering provided by a cache benefits both latency and throughput.\n\n## Eviction Policies\n- Since we cannot cache all data we have, we need to discard some cache when out of space\n- We should consider what the cost is if we choose the policy\n- Eviction decisions should be done in an efficient manner, in order to avoid a situation in which the computation and space overheads required to answer these questions surpasses the benefit of using the cache\n- Hit rate, latency & space matter\n\n#### Examples\n- Least recently used (LRU): Discards the least recently used items first\n- Least frequently used (LFU): Discards data that was least frequently used\n- Segment LRU (SLRU):\n  - SLRU cache is divided into two segments, a probationary segment and a\nprotected segment\n  - Lines in each segment are ordered from the most to the least recently\naccessed\n  - Data from misses is added to the cache at the most recently accessed end of\nthe probationary segment\n  - Hits are removed from wherever they currently reside and added to the most\nrecently accessed end of the protected segment\n  - Lines in the protected segment have thus been accessed at least twice\n\n## Probability data structure\n\n#### Examples\n- Bloom Filter\n  - Pairwise independent hash functions\n  - Used to test whether an element is a member of a set\n  - Two result: \"possibly in set\" or \"definitely not in set\"\n  - isInSet(input) = (h1(input) and h2(input) and h3(input) ...)\n- Count-min Sketch\n  - Pairwise independent hash functions\n  - Used to count elements\n  - count(input) = min(h1(input), h2(input), h3(input), ...)\n\n## Admission policy\n- Hope to boost the effectiveness of caches\n- Given a newly accessed item and an eviction candidate from the cache, our\nscheme decides, based on the recent access history, whether it is worth\nadmitting the new item into the cache at the expense of the eviction candidate\n- An accessed item is only inserted into the cache if an admission policy\ndecides that the cache hit ratio is likely to benefit from replacing it with the\ncache victim\n\n### TinyLFU\nTinyLFU admission policy use Bloom Filter and Count-min Sketch to trace state of elements.\n![TinyLFU structure](cache-policy-pics/tinylfu.png)\n\nIf there is a new element insert event that makes the main cache(SLRU) discard its element, they will be compared with the\nstate of TinyLFU admission policy (Bloom Filter and Count-min Sketch).\n![TinyLFU with Main Cache](cache-policy-pics/tinylfu-2.png)\n\nFinally, for sparse bursts, the paper suggest a LRU as window cache.\n![W-TinyLFU](cache-policy-pics/w-tinylfu.png)\n\n## Reference\n- [Cache(wikipedia)](https://en.wikipedia.org/wiki/Cache_(computing))\n- [Cache replacement policies](https://en.wikipedia.org/wiki/Cache_replacement_policies)\n- [Caffeine wiki](https://github.com/ben-manes/caffeine/wiki/Efficiency)\n- [Window TinyLFU paper](https://dl.acm.org/doi/10.1145/3149371)"},"nextPost":{"slug":"hyper-v-wireguard","frontmatter":{"title":"Hyper V wireguard","date":"June 30, 2023","description":"add hyper v vm and setup wireguard server"},"excerpt":"","content":" \n## Prerequisite knowledge\n- Hyper V\n- Wireguard\n\n## Step 1 新增 VM\n[新增 hyper-v VM](https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/create-a-virtual-machine-in-hyper-v)\n(個人是使用 ubuntu server)\n\n[並使用 external switch](https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/create-a-virtual-switch-for-hyper-v-virtual-machines)\n\n## Step 2 安裝 wireguard\n新增 user 等 linux 設定這邊跳過，需要的話請參考[鳥哥私房菜](https://linux.vbird.org/linux_basic/centos7/0410accountmanager.php)\n```sh\nsudo apt install wireguard\n```\n## Step 3 設定 server\n[生成 wireguard config](https://www.wireguardconfig.com/) (記得不要關掉，後面還會用到)\n\n加上 DNS 後(建議)將 server config 存成 `wg0.conf` 並使用\n\n```sh\nwg-quick up ./wg0.conf\n```\n\n開啟 server (wg-quick 需要 sudo)。\n\n如網路沒通，需要在 `wg0.conf` 的`[Interface]`中加上\n\n```conf\nPreUp = sysctl -w net.ipv4.ip_forward=1\nPreUp = sysctl -w net.ipv6.conf.all.forwarding=1\n```\n讓網路能夠 forward (或直接跑這兩個指令，只需要設定一次)。\n\n## Step 3.5 查看 server\n到這邊 server 的部分就結束了，\n可以使用\n```\nwatch -n 1 sudo wg\n```\n來看 wireguard 的情況。\n\n## Step 4 client 安裝\n在需要的機器上下載 [wireguard 用戶端](https://www.wireguard.com/install/)\n\n並將 client config (生成 wireguard config 部分) 存成 `wg0.conf` 將其匯入用戶端便可使用\n\n\n## Optional\n因為通常家裡都是浮動 IP，所以需要 DDNS，\n\n這邊使用 [DuckDNS](https://www.duckdns.org/)，記得先安裝 curl\n```sh\nsudo apt install curl\n```\n\n註冊完後可以有 5 個 DDNS 的名額，依照[linux cron 的步驟](https://www.duckdns.org/install.jsp)設定，\n(DuckDNS 很貼心都有換成你自己的 token 和 domain)\n\n並可得到 `xxx.duckdns.org` 的 domain，將其輸入在 Endpoint 的地方即可( port 要留著)。\n\n## Final words\n將之前寫的 [AWS wireguard setup](https://github.com/s8508235/wireguard-terraform-install) 用 windows hyper-v 實現一次，\n後來才發現有別人寫好的 [windows solution](https://github.com/micahmo/WgServerforWindows)，有興趣的可以研究一下。"}},"__N_SSG":true}