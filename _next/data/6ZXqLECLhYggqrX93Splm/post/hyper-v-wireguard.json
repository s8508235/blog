{"pageProps":{"frontmatter":{"title":"Hyper V wireguard","date":"June 30, 2023","description":"add hyper v vm and setup wireguard server"},"post":{"content":" \n## Prerequisite knowledge\n- Hyper V\n- Wireguard\n\n## Step 1 新增 VM\n[新增 hyper-v VM](https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/create-a-virtual-machine-in-hyper-v)\n(個人是使用 ubuntu server)\n\n[並使用 external switch](https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/create-a-virtual-switch-for-hyper-v-virtual-machines)\n\n## Step 2 安裝 wireguard\n新增 user 等 linux 設定這邊跳過，需要的話請參考[鳥哥私房菜](https://linux.vbird.org/linux_basic/centos7/0410accountmanager.php)\n```sh\nsudo apt install wireguard\n```\n## Step 3 設定 server\n[生成 wireguard config](https://www.wireguardconfig.com/) (記得不要關掉，後面還會用到)\n\n加上 DNS 後(建議)將 server config 存成 `wg0.conf` 並使用\n\n```sh\nwg-quick up ./wg0.conf\n```\n\n開啟 server (wg-quick 需要 sudo)。\n\n如網路沒通，需要在 `wg0.conf` 的`[Interface]`中加上\n\n```conf\nPreUp = sysctl -w net.ipv4.ip_forward=1\nPreUp = sysctl -w net.ipv6.conf.all.forwarding=1\n```\n讓網路能夠 forward (或直接跑這兩個指令，只需要設定一次)。\n\n## Step 3.5 查看 server\n到這邊 server 的部分就結束了，\n可以使用\n```\nwatch -n 1 sudo wg\n```\n來看 wireguard 的情況。\n\n## Step 4 client 安裝\n在需要的機器上下載 [wireguard 用戶端](https://www.wireguard.com/install/)\n\n並將 client config (生成 wireguard config 部分) 存成 `wg0.conf` 將其匯入用戶端便可使用\n\n\n## Optional\n因為通常家裡都是浮動 IP，所以需要 DDNS，\n\n這邊使用 [DuckDNS](https://www.duckdns.org/)，記得先安裝 curl\n```sh\nsudo apt install curl\n```\n\n註冊完後可以有 5 個 DDNS 的名額，依照[linux cron 的步驟](https://www.duckdns.org/install.jsp)設定，\n(DuckDNS 很貼心都有換成你自己的 token 和 domain)\n\n並可得到 `xxx.duckdns.org` 的 domain，將其輸入在 Endpoint 的地方即可( port 要留著)。\n\n## Final words\n將之前寫的 [AWS wireguard setup](https://github.com/s8508235/wireguard-terraform-install) 用 windows hyper-v 實現一次，\n後來才發現有別人寫好的 [windows solution](https://github.com/micahmo/WgServerforWindows)，有興趣的可以研究一下。","excerpt":""},"previousPost":{"slug":"openssl-escape-character","frontmatter":{"title":"Openssl escape character","date":"January 8, 2022","description":"Be careful about the escape character as Linux input"},"excerpt":"","content":" \nFirst of all, I pick [HTTP signature](https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12) as my authorization method.\n\nI use [Vegeta](https://github.com/tsenart/vegeta) to load test my API service.\n\nWhen writing a script for target generation, I need to make a signature for each request.\n\nSo I used `openssl` to generate it.\n```\necho -n \"${message}\" | openssl dgst -sha256 -hmac \"${secret}\" -binary | base64\n```\nBut I did not pass my authenticator.\n\nAfter some trying(use other language to reproduce what happened), I found that message used for generation was weird.(check the byte)\n\nGo:\n```go\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\tb64 \"encoding/base64\"\n)\n// https://go.dev/play/p/JaDyZh_wNqn\nfunc hmacSha256(data string, secret string) string {\n\th := hmac.New(sha256.New, []byte(secret))\n\th.Write([]byte(data))\n\treturn b64.URLEncoding.EncodeToString(h.Sum(nil))\n}\n```\n\nNode:\n```javascript\nvar crypto = require('crypto');\nfunction hmacSha256(message, secret) {\n    hmac = crypto.createHmac('sha256', secret);\n    hmac.update(message);\n    return hmac.digest('base64')\n}\n```\n\nWhen make `a\\nmessage` as argument in Linux, it would be the same as `a\\\\nmessage`.\n\nUse \n```\necho -e -n \"${message}\" | openssl dgst -sha256 -hmac \"${secret}\" -binary | base64\n``` \ninstead.\n\nThis was why my target generation script didn't pass the authenticator.\n\nI had definitely known how the escape character works, but I didn't check it in the first place.\n\nWhen using escape character as Linux input, you should be careful about it.\n\nOpenssl might be a misplace but never mind. I found the problem from it.\n\nJust write a note to remember the time wasted on it."},"nextPost":null},"__N_SSG":true}